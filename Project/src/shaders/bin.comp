#version 430

layout(local_size_x = 64) in;

struct Particle {
	vec3 position;
	uint bin;
	vec3 velocity;
	uint ID;
};

layout (std140, binding = 0) buffer ParticleBuffer {
	Particle data[];
} particles;

layout (binding = 3) buffer BinCounterBuffer {
	uint data[];
} binCounter;

uniform uint numBins;
uniform float binSize;
																
void main(void) {
	//uint binsPerSide = numBins / 2;

	uint currentParticle = gl_GlobalInvocationID.x;
	
	vec3 pos = particles.data[currentParticle].position;

	// Calculate bin
	ivec3 pos2id = ivec3(min(max(floor(pos / binSize), 0.0f), float(numBins - 1)));

	uint xID = uint(pos2id.x);
	uint yID = uint(pos2id.y);
	uint zID = uint(pos2id.z);
	uint binID = xID + numBins * yID + numBins * numBins * zID;
	particles.data[currentParticle].bin = binID;
	atomicAdd(binCounter.data[binID], 1);
}
