///////////////////////////////////////
//
//	Computer Graphics TSBK03
//	Conrad Wahlén - conwa099
//
///////////////////////////////////////

#version 430

layout(local_size_x = 64) in;

struct Particle {
	vec3 position;
	uint bin;
	vec3 velocity;
	uint ID;
};

struct Bin {
	uint bins;
	uint totalBins;
	float binSize;
	float areaSize;
};

layout (std140, binding = 0) buffer ParticleBuffer {
	Particle particles[];
};

layout (binding = 3) buffer BinCounterBuffer {
	uint binCounter[];
};

layout (std140, binding = 11) uniform BinBuffer {
	Bin binInfo;
};
																
void main(void) {
	uint currentParticle = gl_GlobalInvocationID.x;
	vec3 pos = particles[currentParticle].position;

	// Calculate bin
	ivec3 pos2id = ivec3(min(max(floor(pos / binInfo.binSize), 0.0f), float(binInfo.bins - 1)));
	uint xID = uint(pos2id.x);
	uint yID = uint(pos2id.y);
	uint zID = uint(pos2id.z);
	uint binID = xID + binInfo.bins * yID + binInfo.bins * binInfo.bins * zID;

	// Set bin and add to counter
	particles[currentParticle].bin = binID;
	atomicAdd(binCounter[binID], 1);
}
