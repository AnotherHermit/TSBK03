#version 430

layout(local_size_x = 64) in;

struct Particle {
	vec3 position;
	uint bin;
	vec3 velocity;
	uint padding;
};

layout (std140, binding = 1) buffer ParticleBuffer
{
    Particle data[];  
} particles;

layout(binding = 2) buffer CullBuffer {
	float data[];
} cullPositions;

// Atomic counter of rendered particles;
layout(binding = 0) uniform atomic_uint particlesToRender;

uniform float radius;
uniform uint displaybin;
uniform vec3 boxNormals[5];
uniform vec3 boxPoints[5];

void main(void) {
	uint currentParticle = gl_GlobalInvocationID.x;
	uint outParticleNum = 0;

	vec3 pos = particles.data[currentParticle].position;
	uint bin = particles.data[currentParticle].bin;
	int i = 0;
	bool keepPoint = true;

	vec3 new_point = pos + boxNormals[i] * radius;
	float distance = dot(new_point, boxNormals[i]) - dot(boxPoints[i], boxNormals[i]);
	keepPoint = (distance > 0);
	i++;
	
	new_point = pos + boxNormals[i] * radius;
	distance = dot(new_point, boxNormals[i]) - dot(boxPoints[i], boxNormals[i]);
	keepPoint = keepPoint && (distance > 0);
	i++;

	new_point = pos + boxNormals[i] * radius;
	distance = dot(new_point, boxNormals[i]) - dot(boxPoints[i], boxNormals[i]);
	keepPoint = keepPoint && (distance > 0);
	i++;

	new_point = pos + boxNormals[i] * radius;
	distance = dot(new_point, boxNormals[i]) - dot(boxPoints[i], boxNormals[i]);
	keepPoint = keepPoint && (distance > 0);
	i++;

	new_point = pos + boxNormals[i] * radius;
	distance = dot(new_point, boxNormals[i]) - dot(boxPoints[i], boxNormals[i]);
	keepPoint = keepPoint && (distance > 0);
	// && bin == displaybin
	if(keepPoint) {
		outParticleNum = atomicCounterIncrement(particlesToRender);
		cullPositions.data[outParticleNum * 3] = pos.x;
		cullPositions.data[outParticleNum * 3 + 1] = pos.y;
		cullPositions.data[outParticleNum * 3 + 2] = pos.z;
	}
}
