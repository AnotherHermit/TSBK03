///////////////////////////////////////
//
//	Computer Graphics TSBK03
//	Conrad Wahlén - conwa099
//
///////////////////////////////////////

#version 430

layout(local_size_x = 512) in;

struct Particle {
	vec3 position;
	uint bin;
	vec3 velocity;
	uint ID;
};

struct Camera {
	mat4 WTVmatrix;
	mat4 VTPmatrix;
	vec4 normals[8];
	vec4 points[8];
	vec3 position;
	uint padding99;
	vec4 lodLevels;
};

struct Program {
	float currentT;
	float deltaT;
	float radius;
	float simSpeed;
};

struct DrawElementsIndirectCommand {
	uint vertexCount;
	uint instanceCount;
	uint firstVertex;
	uint baseVertex;
	uint baseInstance;
};

layout (std430, binding = 0) readonly buffer ParticleBuffer
{
    Particle particles[];  
} ;

layout(std430, binding = 2) writeonly buffer CullBuffer {
	float cullPositions[];
};

layout (std140, binding = 10) uniform CameraBuffer {
	Camera cam;
};

layout (std140, binding = 12) uniform ProgramBuffer {
	Program prog;
};

// Atomic counter of rendered particles;
layout(std430, binding = 6) buffer DrawCmdBuffer {
	DrawElementsIndirectCommand drawCmd[5];
};

void main(void) {
	uint currentParticle = gl_GlobalInvocationID.x;
	uint outParticleNum = 0;

	vec3 pos = particles[currentParticle].position;
	//uint bin = particles[currentParticle].bin;
	int i = 0;
	bool keepPoint = true;

	// Check intersection with left frustum plane
	vec3 new_point = pos + cam.normals[i].xyz * prog.radius;
	float distance = dot(new_point, cam.normals[i].xyz) - dot(cam.points[i].xyz, cam.normals[i].xyz);
	keepPoint = (distance > 0);
	i++;
	
	// Check intersection with right frustum plane
	new_point = pos + cam.normals[i].xyz * prog.radius;
	distance = dot(new_point, cam.normals[i].xyz) - dot(cam.points[i].xyz, cam.normals[i].xyz);
	keepPoint = keepPoint && (distance > 0);
	i++;

	// Check intersection with bottom frustum plane
	new_point = pos + cam.normals[i].xyz * prog.radius;
	distance = dot(new_point, cam.normals[i].xyz) - dot(cam.points[i].xyz, cam.normals[i].xyz);
	keepPoint = keepPoint && (distance > 0);
	i++;

	// Check intersection with top frustum plane
	new_point = pos + cam.normals[i].xyz * prog.radius;
	distance = dot(new_point, cam.normals[i].xyz) - dot(cam.points[i].xyz, cam.normals[i].xyz);
	keepPoint = keepPoint && (distance > 0);
	i++;
	
	// Check intersection with far frustum plane (LOD 1)
	new_point = pos + cam.normals[i].xyz * prog.radius;
	distance = dot(new_point, cam.normals[i].xyz) - dot(cam.points[i].xyz, cam.normals[i].xyz);
	keepPoint = keepPoint && (distance > 0);
	i++;

	if(keepPoint) {
		uint ind = 0;

		// Check intersection with LOD 2 plane
		new_point = pos + cam.normals[i].xyz * prog.radius;
		distance = dot(new_point, cam.normals[i].xyz) - dot(cam.points[i].xyz, cam.normals[i].xyz);
		ind += uint(distance > 0);
		i++;

		// Check intersection with LOD 3 plane
		new_point = pos + cam.normals[i].xyz * prog.radius;
		distance = dot(new_point, cam.normals[i].xyz) - dot(cam.points[i].xyz, cam.normals[i].xyz);
		ind += uint(distance > 0);
		i++;

		// Check intersection with LOD 4 plane
		new_point = pos + cam.normals[i].xyz * prog.radius;
		distance = dot(new_point, cam.normals[i].xyz) - dot(cam.points[i].xyz, cam.normals[i].xyz);
		ind += uint(distance > 0);

		outParticleNum = atomicAdd(drawCmd[ind].instanceCount, 1);
		cullPositions[(drawCmd[ind].baseInstance + outParticleNum) * 3] = pos.x;
		cullPositions[(drawCmd[ind].baseInstance + outParticleNum) * 3 + 1] = pos.y;
		cullPositions[(drawCmd[ind].baseInstance + outParticleNum) * 3 + 2] = pos.z;
	}
}
