///////////////////////////////////////
//
//	Computer Graphics TSBK03
//	Conrad Wahlén - conwa099
//
///////////////////////////////////////

#version 430

layout(local_size_x = 512) in;

struct Particle {
	vec3 position;
	uint bin;
	vec3 velocity;
	uint ID;
};

struct Camera {
	mat4 WTVmatrix;
	mat4 VTPmatrix;
	vec4 normals[8];
	vec4 points[8];
	vec3 position;
	uint padding99;
	vec4 lodLevels;
};

struct Bin {
	uint bins;
	uint totalBins;
	float binSize;
	float areaSize;
};

struct Program {
	float currentT;
	float deltaT;
	float radius;
	float simSpeed;
};

struct Boid {
	float preWeight;
	float cohWeight;
	float sepWeight;
	float aliWeight;
	float fearWeight;
};

layout (std430, binding = 0) writeonly buffer ParticleBuffer1
{
    Particle particlesOut[];  
};

layout (std430, binding = 1) readonly buffer ParticleBuffer2
{
    Particle particlesIn[];  
};

layout (std430, binding = 3) readonly buffer BinCounterBuffer {
	uint binCounter[];
};

layout (std430, binding = 4) readonly buffer PrefixSumBuffer {
	uint prefixSum[];
};

layout (std140, binding = 10) uniform CameraBuffer {
	Camera cam;
};

layout (std140, binding = 11) uniform BinBuffer {
	Bin binInfo;
};

layout (std140, binding = 12) uniform ProgramBuffer {
	Program prog;
};

layout (std140, binding = 13) uniform BoidBuffer {
	Boid boid;
};

Particle thisPart;
Particle thatPart;

void main() {
    uint currentParticle = gl_GlobalInvocationID.x;

	// One global read
	thisPart = particlesIn[currentParticle];

    vec3 thisPos = thisPart.position;
    vec3 thisVel = thisPart.velocity;
	uint thisBin = thisPart.bin;
	uint thisID = thisPart.ID;

	// Check that no particles escape!
	if(thisPos.x < 0) {
		thisVel.x = abs(thisVel.x);
	}
	if(thisPos.y < 0) {
		thisVel.y = abs(thisVel.y);
	}
	if(thisPos.z < 0) {
		thisVel.z = abs(thisVel.z);
	}
	if(thisPos.x > binInfo.areaSize) {
		thisVel.x = -abs(thisVel.x);
	}
	if(thisPos.y > binInfo.areaSize) {
		thisVel.y = -abs(thisVel.y);
	}
	if(thisPos.z > binInfo.areaSize) {
		thisVel.z = -abs(thisVel.z);
	}
	
	// Calculate indices to loop over
	ivec3 pos2id = clamp(ivec3(floor(thisPos / binInfo.binSize)), 0, int(binInfo.bins) - 1);
	ivec3 startID = max(pos2id - 1, 0);
	ivec3 endID = min(pos2id + 1, int(binInfo.bins) - 1);

	// Set some variables
	uint thatIndex, thatBin, binCount;
	float dist, scale;
	uint cohMatches = 0;
	uint sepMatches = 0;
	vec3 cohVec = vec3(0.0f), sepVec = vec3(0.0f), aliVec = vec3(0.0f), fearVec = vec3(0.0f);
	vec3 dir;

	// Calculate boid update for all boids in neighbouring bins
	int x, y, z, ind;
	for(z = startID.z; z <= endID.z; z++) {
		for(y = startID.y; y <= endID.y; y++) {
			for (x = startID.x; x <= endID.x; x++) {
				thatBin = x + binInfo.bins * y + binInfo.bins * binInfo.bins * z;
				thatIndex = prefixSum[thatBin];
				binCount = binCounter[thatBin];
				for (ind = 0; ind < binCount; ind++){
					thatPart = particlesIn[thatIndex + ind];
					dist = length(thisPos - thatPart.position);

					if(thisID != thatPart.ID && dist < binInfo.binSize) {
						// Cohesion
						cohMatches++;
						cohVec += thatPart.position;
						
						// Separation
						if(dist < binInfo.binSize / 2.0f) {
							scale = (dist - binInfo.binSize) / dist;
							dir = normalize(thatPart.position - thisPos);
							sepVec += dir * scale;
							sepMatches++;
						}
						
						// Alignment
						dir = normalize(thatPart.velocity);
						aliVec += dir;
					}
				}
			}
		}
	}

	dist = length(thisPos - cam.position);
	if(dist < binInfo.binSize * 3) {
		scale = (dist - binInfo.binSize * 3) / dist;
		dir = normalize(cam.position - thisPos);
		fearVec = normalize(dir * scale) * boid.fearWeight;
	}

	if(cohMatches > 0){
		cohVec /= float(cohMatches);
		cohVec -= thisPos;

		cohVec = boid.cohWeight * normalize(cohVec);
		if(sepMatches > 0) {
			sepVec = boid.sepWeight * normalize(sepVec);
		}
		aliVec = boid.aliWeight * normalize(aliVec);
		thisVel = boid.preWeight * normalize(thisVel);
		thisVel = prog.simSpeed * normalize(cohVec + sepVec + aliVec + fearVec + thisVel);
	}
	
	thisPart.position = thisPos + thisVel * prog.deltaT; // Position update
	thisPart.bin = thisBin; // Keep the bin of the particles
	thisPart.velocity = thisVel; // Velocity update
	thisPart.ID = thisID; // Keep the ID of the particles

    // Only one global write
	particlesOut[currentParticle] = thisPart;
}