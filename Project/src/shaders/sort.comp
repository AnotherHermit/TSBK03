#version 430

layout(local_size_x = 64) in;

struct Particle {
	vec3 position;
	uint bin;
	vec3 velocity;
	uint ID;
};

layout (std140, binding = 0) readonly buffer ParticleBuffer1
{
    Particle data[];  
} particlesIn;

layout (std140, binding = 1) writeonly buffer ParticleBuffer2
{
    Particle data[];  
} particlesOut;

layout (binding = 3) buffer BinCounterBuffer {
	uint data[];
} binCounter;

layout (binding = 4) readonly buffer PrefixSumBuffer {
	uint data[];
} prefixSum;

void main() {
    uint currentParticle = gl_GlobalInvocationID.x;
	uint bin = particlesIn.data[currentParticle].bin;
	uint count = atomicAdd(binCounter.data[bin], 1);
	uint outIndex = prefixSum.data[bin] + count;

	particlesOut.data[outIndex].position = particlesIn.data[currentParticle].position;
	particlesOut.data[outIndex].bin = bin;
	particlesOut.data[outIndex].velocity = particlesIn.data[currentParticle].velocity;
	particlesOut.data[outIndex].ID = particlesIn.data[currentParticle].ID;
}